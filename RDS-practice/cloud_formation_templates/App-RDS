AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AppSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
  DBSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
  VPC:
    Type: 'AWS::EC2::VPC::Id'
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
  OwnerIp:
    Type: String
  SubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of subnet IDs where the RDS will be deployed
  ImageId:
    Type: String
    Description: The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template. 
  DBUsername:
    Type: String
    Description: Username for the database
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for the database
  S3Bucket:
    Type: String
    Description: Name of the S3 bucket where the .jar file is located
  AvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: The availability zone in which to create the RDS instance.
Metadata:
  'AWS::CloudFormation::Designer':
    bab3b089-66d5-4fcb-806c-2b39c9c9bbaa:
      size:
        width: 60
        height: 60
      position:
        x: 240
        'y': 150
      z: 1
      embeds: []
      isassociatedwith:
        - 9560036c-c04b-4cdd-b27b-2a4cd0e280fd
        - 388b1971-269e-41f1-a695-79407997c966
        - 3e39de7f-579d-46f4-9816-7baa07d0faeb
    9560036c-c04b-4cdd-b27b-2a4cd0e280fd:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 150
      z: 1
      embeds: []
    388b1971-269e-41f1-a695-79407997c966:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 0
      embeds: []
    010e2de5-14e5-422a-b9bf-e369f4601ac4:
      source:
        id: 388b1971-269e-41f1-a695-79407997c966
      target:
        id: 388b1971-269e-41f1-a695-79407997c966
      z: 1
    74cce890-9923-4f52-88f6-69a56a08a972:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 210
      z: 1
      embeds: []
    3e39de7f-579d-46f4-9816-7baa07d0faeb:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 90
      z: 1
      embeds: []
    ddd79ce1-f625-4ce0-9202-e2e005ade75b:
      size:
        width: 150
        height: 150
      position:
        x: -130
        'y': 150
      z: 1
      embeds: []
    66c6ec57-3e0d-4080-b3f3-02d4990d7ed6:
      size:
        width: 60
        height: 60
      position:
        x: 140
        'y': 320
      z: 1
      embeds: []
    6693f1e5-53df-4e1f-9121-c4ddf4a9c156:
      size:
        width: 60
        height: 60
      position:
        x: 340
        'y': 250
      z: 1
      embeds: []
Resources:
  PublicHttp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      GroupDescription: Allow Public TCP access through port 8080
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9560036c-c04b-4cdd-b27b-2a4cd0e280fd
  PublicSSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress:
        CidrIp: !Ref OwnerIp
        FromPort: '22'
        ToPort: '22'
        IpProtocol: tcp
      GroupDescription: 'Allow Public TCP access through port 22, only by the Ower IP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3e39de7f-579d-46f4-9816-7baa07d0faeb
  InternalTraffic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow internal access
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 388b1971-269e-41f1-a695-79407997c966
  InternalTrafficRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref InternalTraffic
      IpProtocol: All
      SourceSecurityGroupId: !GetAtt 
        - InternalTraffic
        - GroupId
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 010e2de5-14e5-422a-b9bf-e369f4601ac4
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: S3AndRDSAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:*'
                Resource: !GetAtt RDSInstance.DBInstanceArn
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref S3Bucket
                      - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 66c6ec57-3e0d-4080-b3f3-02d4990d7ed6
  EC2RoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6693f1e5-53df-4e1f-9121-c4ddf4a9c156
  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: RDS Subnet Group
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ddd79ce1-f625-4ce0-9202-e2e005ade75b
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: mysql
      EngineVersion: '8.0'
      DBInstanceIdentifier: database-rsd
      DBInstanceClass: db.t3.micro
      DBName: KProject
      AllocatedStorage: '20'
      MaxAllocatedStorage: 40
      StorageType: gp2
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref InternalTraffic
      AvailabilityZone: !Ref AvailabilityZone
      MultiAZ: false
      PubliclyAccessible: false
      Port: 3306
      PreferredMaintenanceWindow: 'Sun:01:00-Sun:02:00'
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '22:00-23:00'
      Tags:
        - Key: Name
          Value: RDS Instance
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 74cce890-9923-4f52-88f6-69a56a08a972
  SimpleApp:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref AppSubnetId
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref EC2RoleInstanceProfile
      SecurityGroupIds:
        - !Ref PublicHttp
        - !Ref InternalTraffic
        - !Ref PublicSSH
      Tags:
        - Key: Name
          Value: !Sub 'SimpleApp-${AWS::StackName}'
      UserData:
        'Fn::Base64': !Join 
          - ''
          - - |
              #!/bin/bash
            - |
              yum update -y
            - |
              yum install -y mysql
            - |
              yum install -y golang
            - |
              cd $HOME
            - 'aws s3 sync s3://'
            - !Ref S3Bucket
            - |
              /simple-app/ $HOME/simple-app/
            - |
              cd simple-app
            - |
              go mod init main.go
            - |
              go mod tidy
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bab3b089-66d5-4fcb-806c-2b39c9c9bbaa
Outputs:
  RDSInstanceEndpoint:
    Description: Endpoint for RDS Instance
    Value: !Join 
      - ''
      - - 'jdbc:mysql://'
        - !GetAtt RDSInstance.Endpoint.Address
        - ':'
        - !GetAtt RDSInstance.Endpoint.Port
        - /KProject
  EC2InstanceSimpleAppPublicIP:
    Value: !GetAtt SimpleApp.PublicIp
  EC2InstanceSimpleAppPublicDNS:
    Value: !GetAtt SimpleApp.PublicDnsName
